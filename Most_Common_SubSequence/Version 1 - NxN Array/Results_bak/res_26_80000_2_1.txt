==26164== Memcheck, a memory error detector
==26164== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==26164== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==26164== Command: ./a.out ../Inputs/sequenceA_26_80000_1.txt ../Inputs/sequenceB_26_80000_1.txt 2
==26164== 
==26164== Stack overflow in thread #1: can't grow stack to 0x1ffe801000
==26164== 
==26164== Process terminating with default action of signal 11 (SIGSEGV)
==26164==  Access not within mapped region at address 0x1FFE801FF8
==26164== Stack overflow in thread #1: can't grow stack to 0x1ffe801000
==26164==    at 0x10994A: recur_findMCSS (MCSS.c:119)
==26164==  If you believe this happened as a result of a stack
==26164==  overflow in your program's main thread (unlikely but
==26164==  possible), you can try to increase the size of the
==26164==  main thread stack using the --main-stacksize= flag.
==26164==  The main thread stack size used in this run was 8388608.
==26164== Stack overflow in thread #1: can't grow stack to 0x1ffe801000
==26164== 
==26164== Process terminating with default action of signal 11 (SIGSEGV)
==26164==  Access not within mapped region at address 0x1FFE801FF0
==26164== Stack overflow in thread #1: can't grow stack to 0x1ffe801000
==26164==    at 0x482E110: _vgnU_freeres (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-amd64-linux.so)
==26164==  If you believe this happened as a result of a stack
==26164==  overflow in your program's main thread (unlikely but
==26164==  possible), you can try to increase the size of the
==26164==  main thread stack using the --main-stacksize= flag.
==26164==  The main thread stack size used in this run was 8388608.
==26164== 
==26164== HEAP SUMMARY:
==26164==     in use at exit: 12,801,124,108 bytes in 80,005 blocks
==26164==   total heap usage: 80,009 allocs, 4 frees, 12,801,133,404 bytes allocated
==26164== 
==26164== LEAK SUMMARY:
==26164==    definitely lost: 0 bytes in 0 blocks
==26164==    indirectly lost: 0 bytes in 0 blocks
==26164==      possibly lost: 0 bytes in 0 blocks
==26164==    still reachable: 12,801,124,108 bytes in 80,005 blocks
==26164==         suppressed: 0 bytes in 0 blocks
==26164== Rerun with --leak-check=full to see details of leaked memory
==26164== 
==26164== For counts of detected and suppressed errors, rerun with: -v
==26164== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
